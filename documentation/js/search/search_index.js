var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.12,1,1.894]],["body/controllers/AppController.html",[0,1.842,1,3.115,2,1.503,3,0.576,4,0.503,5,0.503,6,3.358,7,0.706,8,0.037,9,1.014,10,2.69,11,3.358,12,0.576,13,0.077,14,2.262,15,1.831,16,0.031,17,0.031]],["title/modules/AppModule.html",[18,1.12,19,1.894]],["body/modules/AppModule.html",[1,2.856,2,1.475,3,0.41,4,0.358,5,0.358,7,0.757,8,0.037,9,0.721,10,2.668,11,2.389,12,0.41,13,0.054,16,0.025,17,0.025,18,1.689,19,3.649,20,1.797,21,1.303,22,1.609,23,1.609,24,1.303,25,2.542,26,1.609,27,2.389,28,2.389,29,2.389,30,2.668,31,2.973,32,2.407,33,2.221,34,1.609,35,1.444,36,2.894,37,2.494,38,2.894,39,2.389,40,2.894,41,2.894,42,1.609,43,2.389]],["title/injectables/AppService.html",[10,1.513,44,1.12]],["body/injectables/AppService.html",[3,0.552,4,0.482,5,0.482,7,0.552,8,0.037,9,0.972,10,2.424,12,0.552,13,0.073,16,0.03,17,0.03,44,1.794,45,2.169,46,3.219,47,0.788,48,2.186,49,5.538,50,1.075,51,3.9,52,1.755,53,1.628,54,1.946,55,3.9,56,3.9]],["title/controllers/AuthController.html",[0,1.12,57,1.894]],["body/controllers/AuthController.html",[0,1.183,2,1.183,3,0.453,4,0.396,5,0.396,7,0.682,8,0.037,9,0.798,12,0.453,13,0.06,14,1.781,15,1.441,16,0.026,17,0.026,47,0.647,48,1.925,50,0.882,52,1.441,53,1.94,57,2.672,58,2.643,59,2.275,60,3.202,61,2.403,62,3.531,63,3.531,64,3.422,65,2.403,66,1.304,67,3.531,68,3.202,69,1.598,70,1.598,71,0.882,72,1.304,73,2,74,2.643,75,2.275,76,2.168,77,2.643,78,2.275,79,1.441,80,3.202,81,3.202]],["title/modules/AuthModule.html",[18,1.12,30,1.513]],["body/modules/AuthModule.html",[2,1.58,3,0.453,4,0.396,5,0.396,7,0.728,8,0.037,9,0.798,12,0.453,13,0.06,16,0.026,17,0.026,18,1.779,20,1.441,21,1.441,22,1.781,23,1.781,24,1.441,25,2.678,26,2.678,30,2.808,32,1.925,33,2.378,34,1.781,35,1.598,37,2,57,3.008,76,2.673,77,2.643,82,2.643,83,2.643,84,2.643,85,3.202,86,2.672,87,3.202,88,3.202]],["title/injectables/AuthService.html",[44,1.12,76,1.365]],["body/injectables/AuthService.html",[3,0.404,4,0.352,5,0.352,7,0.56,8,0.037,9,0.71,12,0.404,13,0.054,15,1.283,16,0.024,17,0.024,42,1.585,44,1.459,45,1.585,47,0.576,48,1.779,50,1.25,52,1.779,53,1.917,54,1.972,61,2.656,62,3.262,63,3.262,64,3.222,65,2.263,69,1.972,70,1.972,71,1.089,72,1.61,73,1.78,76,1.779,86,1.78,89,2.353,90,4.043,91,2.807,92,2.353,93,2.223,94,2.85,95,2.85,96,2.85,97,2.85,98,2.353,99,2.353,100,2.353,101,2.353,102,2.025,103,2.85,104,2.85,105,2.353]],["title/classes/CreatePostDto.html",[13,0.057,106,1.513]],["body/classes/CreatePostDto.html",[3,0.167,4,0.146,5,0.146,7,0.523,8,0.037,12,0.167,13,0.064,16,0.012,17,0.012,47,0.239,50,1.228,53,1.71,66,1.815,71,1.422,72,1.685,79,0.531,105,2.811,106,0.996,107,0.531,108,3.257,109,0.839,110,1.167,111,2.811,112,2.592,113,2.592,114,3.249,115,2.592,116,2.592,117,3.406,118,1.842,119,3.406,120,2.811,121,2.811,122,3.415,123,1.181,124,1.181,125,1.996,126,1.996,127,1.913,128,3.051,129,1.181,130,1.181,131,1.903,132,1.181,133,3.696,134,1.647,135,1.647,136,1.996,137,1.181,138,1.181,139,1.181,140,2.139,141,3.047,142,3.696,143,1.247,144,1.647,145,1.647,146,2.592,147,1.181,148,1.181,149,3.047,150,2.515,151,1.996,152,1.996,153,1.181,154,1.181,155,1.996,156,1.996,157,2.592,158,1.996,159,1.996,160,1.996,161,1.996,162,1.181,163,1.181,164,1.181,165,1.181,166,3.047,167,1.181,168,3.047,169,2.515,170,1.647,171,1.996,172,3.047,173,1.996,174,1.996,175,1.996,176,1.181,177,2.811,178,1.181,179,2.114,180,1.647,181,1.647,182,1.181,183,1.181,184,1.996,185,1.181,186,1.181,187,3.696,188,1.181,189,1.181,190,1.181,191,2.796,192,1.181,193,2.592,194,2.796,195,1.903,196,0.975,197,1.996,198,1.996,199,1.996,200,0.975,201,1.996,202,1.293,203,1.181,204,1.181,205,0.839,206,1.418,207,1.181,208,0.839,209,2.811,210,3.249,211,1.181,212,1.181,213,1.181,214,0.975,215,1.181,216,1.181,217,1.181,218,1.181,219,1.181,220,1.181,221,0.975,222,0.975,223,1.996,224,1.996,225,1.181,226,0.975,227,1.181,228,0.839,229,2.139,230,0.975,231,1.181,232,1.181,233,1.418,234,0.975,235,1.181]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.057,131,1.894]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.5,4,0.437,5,0.437,7,0.5,8,0.037,12,0.5,13,0.086,16,0.028,17,0.028,47,0.714,50,1.257,53,1.529,66,1.859,71,1.257,107,1.59,108,3.591,110,2.054,127,2.058,131,2.85,191,3.242,195,3.336,202,1.763,206,3.591,229,4.172,233,3.591,236,2.917,237,3.533,238,3.533,239,3.533]],["title/classes/CreateUserDto.html",[13,0.057,240,1.686]],["body/classes/CreateUserDto.html",[3,0.382,4,0.333,5,0.333,7,0.382,8,0.036,12,0.382,13,0.072,16,0.023,17,0.023,47,0.545,50,1.317,53,1.839,64,3.128,66,1.947,71,1.317,73,2.75,107,1.214,110,1.711,169,3.138,170,3.138,191,3.397,194,2.701,195,2.986,196,2.226,200,2.226,202,1.346,226,3.138,240,2.114,241,4.161,242,1.916,243,3.634,244,4.403,245,2.697,246,2.697,247,2.697,248,2.697,249,2.697,250,2.697,251,2.697,252,3.802,253,3.802,254,3.802,255,5.23,256,3.802,257,2.114,258,3.802,259,2.697,260,2.697,261,3.802,262,2.697,263,3.802,264,3.802,265,2.697,266,2.697,267,2.697]],["title/classes/GetUsersParamDto.html",[13,0.057,268,1.686]],["body/classes/GetUsersParamDto.html",[3,0.472,4,0.412,5,0.412,7,0.695,8,0.037,12,0.472,13,0.092,16,0.027,17,0.027,42,2.441,47,0.673,50,0.918,65,2.707,66,1.356,71,1.353,72,1.788,79,1.499,107,1.499,110,1.976,121,2.749,128,2.742,179,1.499,194,3.119,202,1.662,208,2.366,210,3.624,257,2.731,268,2.441,269,3.624,270,2.441,271,2.749,272,4.39,273,3.33,274,3.33,275,3.624,276,3.33]],["title/classes/PatchPostDto.html",[13,0.057,277,1.894]],["body/classes/PatchPostDto.html",[3,0.484,4,0.423,5,0.423,7,0.705,8,0.037,12,0.484,13,0.084,16,0.028,17,0.028,47,0.691,50,0.943,65,2.731,66,1.393,71,0.943,79,1.54,106,1.707,107,1.54,109,2.43,110,2.011,127,1.82,140,2.824,179,1.54,195,2.791,202,1.707,205,2.43,209,3.688,257,2.484,275,3.688,277,2.791,278,3.688,279,3.688,280,4.468,281,3.421,282,3.421,283,2.824,284,2.43,285,2.824]],["title/classes/PatchUserDto.html",[13,0.057,286,1.894]],["body/classes/PatchUserDto.html",[3,0.573,4,0.5,5,0.5,7,0.704,8,0.037,12,0.573,13,0.076,16,0.031,17,0.031,107,1.821,205,2.875,240,2.25,242,2.875,279,4.102,283,3.34,286,3.104,287,3.34,288,4.97,289,3.34,290,3.34,291,3.34]],["title/controllers/PostsController.html",[0,1.12,292,1.894]],["body/controllers/PostsController.html",[0,0.705,2,0.705,3,0.27,4,0.236,5,0.236,7,0.618,8,0.037,9,0.476,12,0.27,13,0.036,14,1.062,15,0.859,16,0.018,17,0.018,43,2.431,47,0.386,48,1.326,50,0.991,52,1.618,53,1.205,54,1.47,59,1.357,61,2.543,66,1.465,67,1.576,69,1.794,70,1.794,71,0.991,72,1.465,74,1.576,75,1.357,78,1.357,79,0.859,106,2.4,118,2.555,122,3.336,127,2.023,179,2.077,277,2.525,284,2.093,285,2.431,292,2.246,293,1.576,294,4.042,295,2.431,296,2.945,297,2.945,298,1.576,299,2.945,300,3.336,301,3.336,302,2.945,303,2.093,304,2.945,305,4.042,306,4.042,307,1.909,308,1.909,309,1.909,310,1.909,311,2.431,312,3.336,313,1.909,314,3.336,315,3.336,316,2.431,317,1.909,318,2.431,319,1.909,320,2.431,321,2.945,322,2.945,323,1.909,324,1.909,325,2.945,326,1.576,327,2.431,328,2.017,329,1.576,330,1.357,331,3.336,332,3.336,333,1.576,334,1.909,335,1.909,336,1.357,337,2.968,338,1.909,339,1.909,340,1.909,341,1.576,342,1.909,343,1.909,344,1.909]],["title/modules/PostsModule.html",[18,1.12,31,1.686]],["body/modules/PostsModule.html",[2,1.603,3,0.463,4,0.404,5,0.404,7,0.734,8,0.037,9,0.816,12,0.463,13,0.062,16,0.027,17,0.027,18,1.798,20,1.473,21,1.473,22,1.819,23,1.819,24,1.473,25,2.707,26,1.819,31,3.194,32,2.496,33,2.413,34,1.819,35,1.633,37,2.71,39,2.701,292,3.041,328,2.767,329,2.701,345,2.701,346,3.272,347,2.701,348,3.272,349,3.272]],["title/injectables/PostsService.html",[44,1.12,328,1.513]],["body/injectables/PostsService.html",[3,0.371,4,0.324,5,0.324,7,0.614,8,0.038,9,0.653,12,0.371,13,0.049,14,1.458,15,1.18,16,0.023,17,0.023,42,2.881,44,1.376,45,1.458,47,0.53,48,1.677,50,1.195,52,1.677,53,1.453,54,1.859,61,2.586,65,1.308,69,2.163,70,2.163,71,1.195,72,1.766,91,1.863,92,2.164,93,2.111,99,2.164,102,1.863,106,2.66,111,3.897,120,3.076,127,1.518,228,2.647,270,1.458,284,1.863,295,3.076,298,3.076,318,2.164,328,1.859,330,1.863,350,2.164,351,3.076,352,2.622,353,2.622,354,3.726,355,2.622,356,2.164,357,2.164,358,2.622,359,2.622,360,3.726]],["title/controllers/UsersController.html",[0,1.12,361,1.894]],["body/controllers/UsersController.html",[0,0.998,2,0.631,3,0.242,4,0.211,5,0.211,7,0.624,8,0.037,9,0.426,12,0.242,13,0.032,14,0.951,15,0.77,16,0.017,17,0.017,47,0.345,48,1.216,50,0.923,52,1.508,53,0.573,54,2.069,59,1.215,61,2.458,66,1.365,69,1.672,70,2.069,71,1.272,72,1.551,75,1.92,78,1.215,79,0.77,93,1.365,118,1.215,127,1.551,128,2.378,134,3.142,135,3.142,143,2.989,179,1.984,228,1.92,234,2.23,240,2.566,257,2.99,268,2.451,270,2.566,286,2.989,291,2.23,300,2.23,301,1.411,303,1.92,311,2.23,312,3.142,314,2.23,315,2.23,316,1.411,326,1.411,327,2.765,330,1.215,331,2.23,332,2.23,333,1.411,336,1.215,337,1.411,341,1.411,356,1.411,361,1.688,362,1.411,363,2.702,364,3.35,365,2.702,366,1.71,367,1.71,368,1.71,369,3.638,370,1.71,371,1.71,372,1.71,373,2.702,374,2.702,375,2.702,376,3.35,377,1.71,378,2.702,379,1.71,380,1.71,381,1.71,382,3.35,383,1.71,384,1.411,385,1.411,386,1.411,387,3.35,388,1.71,389,1.71,390,1.71,391,1.71,392,1.71,393,1.71,394,1.71,395,1.71,396,1.71,397,1.71,398,1.71,399,1.71,400,1.71,401,1.71,402,1.71,403,1.71,404,1.71,405,1.71]],["title/modules/UsersModule.html",[18,1.12,32,1.365]],["body/modules/UsersModule.html",[2,1.58,3,0.453,4,0.396,5,0.396,7,0.728,8,0.037,9,0.798,12,0.453,13,0.06,16,0.026,17,0.026,18,1.779,20,1.441,21,1.441,22,1.781,23,1.781,24,1.441,25,2.678,26,2.678,30,2.134,32,2.532,33,2.378,34,1.781,35,1.598,37,2,86,2.672,93,2.419,361,3.008,386,2.643,406,2.643,407,2.643,408,2.643,409,3.202,410,3.202,411,3.202]],["title/injectables/UsersService.html",[44,1.12,93,1.235]],["body/injectables/UsersService.html",[3,0.338,4,0.295,5,0.295,7,0.583,8,0.038,9,0.595,12,0.338,13,0.066,15,1.075,16,0.021,17,0.021,42,1.328,44,1.287,45,1.328,47,0.483,48,1.568,50,1.134,52,1.568,53,1.611,54,1.739,61,2.505,65,1.739,69,2.053,70,2.053,71,1.134,72,1.676,73,2.825,76,2.391,86,1.492,90,2.876,91,2.476,93,1.419,98,1.972,100,1.972,101,1.972,102,1.697,143,2.57,243,3.733,257,2.791,268,2.791,270,1.938,336,1.697,351,3.396,357,2.876,369,3.396,384,1.972,385,1.972,412,1.972,413,3.485,414,2.389,415,2.389,416,2.389,417,2.389,418,3.485,419,2.389,420,2.389,421,2.389,422,2.389,423,3.485,424,3.485,425,2.389,426,2.389]],["title/coverage.html",[427,2.929]],["body/coverage.html",[0,1.803,1,1.767,5,0.35,6,2.335,8,0.037,10,1.412,13,0.1,16,0.024,17,0.024,24,1.273,44,1.803,46,2.335,57,1.767,58,2.335,71,0.78,76,1.273,89,2.335,93,1.152,106,1.412,108,2.793,109,2.793,127,1.152,131,1.767,206,2.01,230,2.335,236,2.335,240,1.573,241,2.335,242,2.793,268,1.573,269,2.335,270,1.573,271,2.335,277,1.767,278,2.335,286,1.767,287,2.335,292,1.767,293,2.335,303,2.01,328,1.412,350,2.335,361,1.767,362,2.335,412,2.335,427,2.01,428,2.335,429,2.829,430,5.934,431,4.517,432,4.881,433,5.13,434,2.335,435,2.829,436,2.829,437,2.829,438,2.829,439,2.829,440,2.829]],["title/dependencies.html",[21,1.639,441,2.096]],["body/dependencies.html",[8,0.038,9,0.967,13,0.091,16,0.03,17,0.03,21,1.746,79,1.746,202,1.936,208,2.757,289,3.203,290,3.203,442,3.88,443,3.88,444,5.278,445,3.88,446,3.88,447,3.88,448,3.88,449,3.88,450,3.88,451,3.88,452,3.88,453,3.88,454,3.88,455,3.88,456,3.88]],["title/miscellaneous/enumerations.html",[457,1.586,458,3.007]],["body/miscellaneous/enumerations.html",[8,0.037,16,0.029,17,0.029,47,0.757,114,3.909,127,1.929,143,2.958,144,3.909,145,3.909,150,3.909,177,3.909,180,3.909,181,3.909,214,3.909,233,4.197,457,2.339,458,3.091,459,3.744,460,3.744,461,3.744,462,3.744]],["title/miscellaneous/functions.html",[457,1.586,463,3.007]],["body/miscellaneous/functions.html",[8,0.033,16,0.033,17,0.033,24,2.542,47,0.916,434,3.743,457,2.833,463,3.743,464,4.535]],["title/index.html",[47,0.513,465,2.539,466,2.539]],["body/index.html",[4,0.286,8,0.035,16,0.021,17,0.021,35,2.223,128,2.524,179,1.042,221,3.677,222,1.911,320,1.911,427,1.645,428,1.911,467,2.315,468,2.315,469,4.04,470,2.315,471,2.315,472,2.315,473,2.315,474,2.315,475,2.315,476,4.04,477,2.315,478,2.315,479,4.455,480,2.315,481,5.133,482,2.315,483,5.133,484,2.315,485,2.315,486,2.315,487,3.406,488,2.315,489,2.315,490,2.315,491,4.04,492,2.315,493,3.406,494,2.315,495,2.315,496,2.315,497,4.455,498,2.315,499,2.315,500,2.315,501,2.315,502,2.315,503,3.406,504,2.315,505,4.04,506,2.315,507,3.677,508,3.406,509,2.315,510,2.315,511,2.315,512,2.315,513,2.315,514,2.315,515,4.04,516,2.315,517,2.315,518,2.315,519,3.406,520,2.315,521,2.315,522,2.315,523,4.04,524,2.315,525,2.315,526,2.315,527,2.315,528,2.315,529,2.315,530,2.315,531,3.406,532,2.315,533,2.315,534,2.315,535,2.315,536,2.315,537,3.406,538,2.315,539,2.315,540,2.315,541,3.406,542,3.406,543,2.315,544,2.315,545,2.315,546,2.315,547,2.315,548,2.315,549,2.315,550,2.315,551,2.315,552,2.315,553,2.315,554,1.911,555,2.315,556,2.315,557,2.315,558,2.315,559,2.315,560,2.315,561,1.911]],["title/modules.html",[20,1.856]],["body/modules.html",[8,0.031,16,0.031,17,0.031,19,2.627,20,1.893,30,2.098,31,2.338,32,1.893,507,4.692,562,5.684,563,5.684,564,5.684]],["title/overview.html",[565,3.403]],["body/overview.html",[2,1.116,8,0.036,10,2.334,16,0.025,17,0.025,18,1.116,19,3.613,20,1.36,21,1.36,22,1.681,23,1.681,24,1.36,25,1.681,26,1.681,27,2.495,28,2.495,29,2.495,30,2.703,31,3.083,32,2.495,33,2.287,34,1.681,35,1.508,45,1.681,76,2.495,82,2.495,83,2.495,84,2.495,93,2.258,107,1.36,328,2.334,345,2.495,347,2.495,406,2.495,407,2.495,408,2.495,565,2.495,566,4.676,567,3.022]],["title/properties.html",[110,1.639,441,2.096]],["body/properties.html",[8,0.037,16,0.032,17,0.032,110,2.005,179,2.005,554,3.677,561,3.677,568,4.454,569,4.454,570,4.454]],["title/routes.html",[571,3.403]],["body/routes.html",[8,0.034,16,0.034,17,0.034,571,3.908]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":569,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":451,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":450,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":438,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t00:00:00.000z",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t00:00:00.000z'})@isiso8601()@isoptional",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":276,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234'})@isoptional()@isint()@type(undefined",{"_index":273,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":360,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["202",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["2021",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":566,"title":{},"body":{"overview.html":{}}}],["6",{"_index":567,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["amazing",{"_index":547,"title":{},"body":{"index.html":{}}}],["api",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":519,"title":{},"body":{"index.html":{}}}],["applications",{"_index":475,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/providers/auth.service",{"_index":420,"title":{},"body":{"injectables/UsersService.html":{}}}],["authcontroller",{"_index":57,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":554,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":76,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["backers",{"_index":548,"title":{},"body":{"index.html":{}}}],["blog",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":540,"title":{},"body":{"index.html":{}}}],["body",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":564,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":562,"title":{},"body":{"modules.html":{}}}],["building",{"_index":470,"title":{},"body":{"index.html":{}}}],["case",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["channel",{"_index":510,"title":{},"body":{"index.html":{}}}],["character",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["character'})@isnotempty",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":497,"title":{},"body":{"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":345,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":346,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":347,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":406,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":408,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":407,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":500,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["console.log('isauth",{"_index":422,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostsdto",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(typeof",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["console.log(user",{"_index":359,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["content",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":517,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":427,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["createpost",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":106,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":131,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":240,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["date",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":512,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":484,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":525,"title":{},"body":{"index.html":{}}}],["discord",{"_index":509,"title":{},"body":{"index.html":{}}}],["dive",{"_index":511,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":428,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":494,"title":{},"body":{"index.html":{}}}],["each",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":471,"title":{},"body":{"index.html":{}}}],["eight",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["end",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["endpoint",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["enterprise",{"_index":530,"title":{},"body":{"index.html":{}}}],["entries",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":458,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["experience",{"_index":514,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":279,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["feature",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["fetched.'})@apiquery({name",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["few",{"_index":498,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":357,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":351,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":354,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":418,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["firstname",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["follow",{"_index":533,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":469,"title":{},"body":{"index.html":{}}}],["full",{"_index":529,"title":{},"body":{"index.html":{}}}],["function",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":463,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["get('/:userid?')@apioperation({summary",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":465,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":268,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":520,"title":{},"body":{"index.html":{}}}],["grow",{"_index":544,"title":{},"body":{"index.html":{}}}],["hands",{"_index":513,"title":{},"body":{"index.html":{}}}],["handy",{"_index":501,"title":{},"body":{"index.html":{}}}],["hello",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":527,"title":{},"body":{"index.html":{}}}],["here",{"_index":552,"title":{},"body":{"index.html":{}}}],["https://example.com/image.jpg",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg'})@isstring()@isoptional()@isurl",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":558,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hyphens",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":44,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":45,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["installcompile",{"_index":482,"title":{},"body":{"index.html":{}}}],["interact",{"_index":521,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":275,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":237,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isoptional()@isjson",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@minlength(3)@maxlength(96)@isnotempty",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(3)@maxlength(96)@isoptional",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(8)@matches(/^(?=.*[a",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["item",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":425,"title":{},"body":{"injectables/UsersService.html":{}}}],["jane@austin.com",{"_index":426,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":537,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":539,"title":{},"body":{"index.html":{}}}],["john",{"_index":423,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":424,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":550,"title":{},"body":{"index.html":{}}}],["json",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":555,"title":{},"body":{"index.html":{}}}],["kebab",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["key",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["keyword",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["lastname",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":504,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["letter",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":561,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":542,"title":{},"body":{"index.html":{}}}],["limit",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":535,"title":{},"body":{"index.html":{}}}],["list",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["login",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(email",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["looking",{"_index":536,"title":{},"body":{"index.html":{}}}],["loop",{"_index":532,"title":{},"body":{"index.html":{}}}],["lower",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["maxlength",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(1",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(3",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(5",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":457,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":541,"title":{},"body":{"index.html":{}}}],["mode",{"_index":487,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":505,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":556,"title":{},"body":{"index.html":{}}}],["name",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":526,"title":{},"body":{"index.html":{}}}],["nest",{"_index":476,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":560,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":289,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":468,"title":{},"body":{"index.html":{}}}],["npm",{"_index":481,"title":{},"body":{"index.html":{}}}],["number",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["occur",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":538,"title":{},"body":{"index.html":{}}}],["official",{"_index":515,"title":{},"body":{"index.html":{}}}],["one",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":543,"title":{},"body":{"index.html":{}}}],["option",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":236,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":238,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":239,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":565,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":441,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":271,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":274,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":528,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":283,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":280,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":288,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":277,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":286,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["person",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["place",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["please",{"_index":508,"title":{},"body":{"index.html":{}}}],["position",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.'})@apiresponse({status",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.'})@isstring()@isoptional",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.'})@isstring()@minlength(5)@isnotempty",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":284,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":282,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:123",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:26",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:34",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:45",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:70",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:79",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:87",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:97",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.'})@apiresponse({status",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":349,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":292,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":328,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype})@isenum(posttype)@isnotempty",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":489,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":467,"title":{},"body":{"index.html":{}}}],["project",{"_index":479,"title":{},"body":{"index.html":{}}}],["properties",{"_index":110,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":506,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":551,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":522,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":478,"title":{},"body":{"index.html":{}}}],["request",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":499,"title":{},"body":{"index.html":{}}}],["response",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["review''})@isenum(poststatus",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["routes",{"_index":571,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":483,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":472,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sent",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":473,"title":{},"body":{"index.html":{}}}],["service",{"_index":356,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["setup",{"_index":480,"title":{},"body":{"index.html":{}}}],["side",{"_index":474,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":272,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["specifies",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sponsors",{"_index":546,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":464,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":460,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":51,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":411,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:15",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":434,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":278,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:19",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:29",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":348,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":350,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:27",{"_index":353,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:6",{"_index":352,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":355,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":269,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":287,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:14",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:36",{"_index":419,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:6",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:45",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":409,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":485,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":488,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":490,"title":{},"body":{"index.html":{}}}],["started",{"_index":466,"title":{"index.html":{}},"body":{}}],["starter",{"_index":477,"title":{},"body":{"index.html":{}}}],["statements",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":531,"title":{},"body":{"index.html":{}}}],["story",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully.'})@patch",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully.'})@post",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":507,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":563,"title":{},"body":{"modules.html":{}}}],["table",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":439,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":493,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":496,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":495,"title":{},"body":{"index.html":{}}}],["tests",{"_index":491,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":545,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":421,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.createpost(createpostdto",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":358,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":523,"title":{},"body":{"index.html":{}}}],["title",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":553,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(1",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":559,"title":{},"body":{"index.html":{}}}],["type",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":290,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":492,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":570,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":285,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated.'})@isint()@isnotempty",{"_index":281,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["use",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":291,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":270,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.'})@apiresponse({status",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":410,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["userscontroller",{"_index":361,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":93,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":524,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":568,"title":{},"body":{"properties.html":{}}}],["video",{"_index":516,"title":{},"body":{"index.html":{}}}],["visit",{"_index":503,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":518,"title":{},"body":{"index.html":{}}}],["void",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["want",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":486,"title":{},"body":{"index.html":{}}}],["website",{"_index":557,"title":{},"body":{"index.html":{}}}],["working",{"_index":502,"title":{},"body":{"index.html":{}}}],["world",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":534,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":549,"title":{},"body":{"index.html":{}}}],["z0",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z])(?=.*[!@#$&*])(?=.*[0",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n// User created modules\n\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Get('/:userId')\n  public login(email: string, password: string, id: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById('1234');\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content for the blog post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the feature image for the blog post', example: 'https://example.com/image.jpg'})@IsString()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Possible values: 'post', 'page', 'story', 'series'', enum: postType})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the date the blog post was published', example: '2021-01-01T00:00:00.000Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will occur', example: '{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Person\"\n  }'})@IsString()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my-first-post'', example: 'my-first-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all lower case and contain hyphens (kebab-case)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values: 'draft', 'published', 'scheduled', 'review''})@IsEnum(postStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'An array of tags passed as string values', example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(1, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the title for the blog post.'})@IsString()@MinLength(5)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEnum,\n  IsArray,\n  IsOptional,\n  IsNotEmpty,\n  Matches,\n  IsJSON,\n  IsUrl,\n  IsISO8601,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postType } from '../enums/postType.enum';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is the title for the blog post.',\n  })\n  @IsString()\n  @MinLength(5)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    description: \"Possible values: 'post', 'page', 'story', 'series'\",\n    enum: postType,\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: \"For example - 'my-first-post'\",\n    example: 'my-first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message: 'A slug should be all lower case and contain hyphens (kebab-case)',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values: 'draft', 'published', 'scheduled', 'review'\",\n  })\n  @IsEnum(postStatus)\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content for the blog post.',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will occur',\n    example:\n      '{\\r\\n    \"@context\": \"https://schema.org\",\\r\\n    \"@type\": \"Person\"\\r\\n  }',\n  })\n  @IsString()\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the feature image for the blog post',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsString()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'This is the date the blog post was published',\n    example: '2021-01-01T00:00:00.000Z',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishedOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'An array of tags passed as string values',\n    example: ['nestjs', 'typescript'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true }) //specifies to the class validator that each item in the array should be a string\n  @MinLength(1, { each: true }) //specifies to the class validator that each item in the array should have a minimum length of 1\n  tags: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to the key.',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@MaxLength(96)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@MaxLength(96)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(8)@Matches(/^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9]).*$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  MinLength,\n  MaxLength,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @MinLength(3)\n  @MaxLength(96)\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @MinLength(3)\n  @MaxLength(96)\n  @IsOptional()\n  lastName: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9]).*$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific Id', example: '1234'})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific Id',\n    example: '1234',\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post to be updated.'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post to be updated.',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'This api endpoint creates a new blog post.'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')@ApiOperation({summary: 'Fetches a list of posts.'})@ApiResponse({status: 200, description: 'The list of posts has been successfully fetched.'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'This api endpoint updates an existing blog post.'})@ApiResponse({status: 202, description: 'You get a 200 response if your post is updated successfully.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Patch } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@ApiTags('posts')\n@Controller('posts')\nexport class PostsController {\n  //Injecting PostsService into the PostsController\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  @ApiOperation({ summary: 'Fetches a list of posts.' })\n  @ApiResponse({\n    status: 200,\n    description: 'The list of posts has been successfully fetched.',\n  })\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({ summary: 'This api endpoint creates a new blog post.' })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created successfully.',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(typeof createPostDto);\n    return this.postsService.createPost(createPostDto);\n  }\n\n  @ApiOperation({ summary: 'This api endpoint updates an existing blog post.' })\n  @ApiResponse({\n    status: 202,\n    description: 'You get a 200 response if your post is updated successfully.',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostsDto: PatchPostDto) {\n    console.log(patchPostsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { PostsController } from './posts.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  providers: [PostsService],\n  controllers: [PostsController],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreatePostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n  public findAll(userId: string) {\n    //Users Service\n    //Find a user by ID\n    const user = this.usersService.findOneById(userId);\n    console.log(user);\n    return [\n      {\n        user: user,\n        title: 'Post 1',\n        content: 'Content 1',\n      },\n      {\n        user: user,\n        title: 'Post 2',\n        content: 'Content 2',\n      },\n    ];\n  }\n\n  public createPost(createPostDto: CreatePostDto) {\n    return createPostDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of users.'})@ApiResponse({status: 200, description: 'The list of users has been successfully fetched.'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiTags, ApiQuery, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  //Injecting Users Service to the controller\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/:id?') // you can use any keyword for optional as long as you place a ? at the end.\n  @ApiOperation({ summary: 'Fetches a list of users.' })\n  @ApiResponse({\n    status: 200,\n    description: 'The list of users has been successfully fetched.',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    console.log(typeof createUserDto);\n    return 'You sent a post request to users endpoint';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from '../../auth/providers/auth.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    //Injecting the AuthService class\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  //Find all users\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n\n    const isAuth = this.authService.isAuth();\n    console.log('isAuth', isAuth);\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Jane',\n        email: 'jane@austin.com',\n      },\n    ];\n  }\n\n  //Find a user by id\n\n  public findOneById(id: string) {\n    return {\n      firstName: 'John',\n      email: 'john@doe.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
